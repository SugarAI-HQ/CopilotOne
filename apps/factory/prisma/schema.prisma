generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

generator zod {
  provider               = "zod-prisma-types"
  output                 = "../src/generated/prisma-client-zod.ts"
  createInputTypes       = false
  addInputTypeValidation = false
}

// console.log(`database url ${env("DATABASE_URL")}`);
datasource db {
  // provider = "sqlite"
  provider          = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  extensions        = [uuid_ossp(map: "uuid-ossp"), vector]
}

// LabelledState enum-like values
enum LabelledState {
  UNLABELLED
  SELECTED
  REJECTED
  NOTSURE
}

enum PackageVisibility {
  PUBLIC
  PRIVATE
}

enum FinetunedState {
  UNPROCESSED
  PROCESSED
}

enum PromptEnvironment {
  DEV
  PREVIEW
  RELEASE
}

enum ModelType {
  TEXT2TEXT
  TEXT2IMAGE
  TEXT2CODE
  IMAGE2IMAGE
}

enum PromptRunModes {
  AUTHORISED_ONLY
  LOGGEDIN_ONLY
  ALL
}

enum MediaType {
  IMAGE
  VIDEO
}

// Necessary for Next auth
model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model PromptVariables {
  id               String         @id @default(uuid())
  userId           String
  promptPackageId  String
  promptTemplateId String
  promptVersionId  String
  name             String
  majorVersion     String
  minorVersion     String
  variables        Json
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt @map("updated_at")
  promptPackage    PromptPackage  @relation(fields: [promptPackageId], references: [id])
  promptTemplate   PromptTemplate @relation(fields: [promptTemplateId], references: [id])
  PromptVersion    PromptVersion  @relation(fields: [promptVersionId], references: [id])

  @@unique([promptTemplateId, majorVersion, minorVersion, variables])
}

model PromptPackage {
  id              String            @id @default(uuid())
  userId          String
  name            String
  description     String
  visibility      PackageVisibility @default(PUBLIC)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt @map("updated_at")
  User            User              @relation(fields: [userId], references: [id])
  templates       PromptTemplate[]
  PromptVariables PromptVariables[]
  PromptVersion   PromptVersion[]

  @@unique([userId, name])
}

model PromptTemplate {
  id               String            @id @default(uuid())
  userId           String
  promptPackageId  String
  name             String
  description      String
  previewVersionId String?           @unique
  releaseVersionId String?           @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt @map("updated_at")
  modelType        ModelType         @default(TEXT2TEXT)
  runMode          PromptRunModes    @default(LOGGEDIN_ONLY)
  promptPackage    PromptPackage     @relation(fields: [promptPackageId], references: [id])
  User             User              @relation(fields: [userId], references: [id])
  previewVersion   PromptVersion?    @relation("previewVersion", fields: [previewVersionId], references: [id], map: "previewVersion")
  releaseVersion   PromptVersion?    @relation("releaseVersion", fields: [releaseVersionId], references: [id], map: "releaseVersion")
  PromptVariables  PromptVariables[]
  versions         PromptVersion[]   @relation("template")

  @@unique([promptPackageId, name])
}

model PromptVersion {
  id               String            @id @default(uuid())
  forkedFromId     String?
  userId           String
  version          String
  template         String
  promptData       Json              @default("{}")
  inputFields      String[]
  templateFields   String[]
  llmProvider      String
  llmModelType     ModelType         @default(TEXT2TEXT)
  llmModel         String
  llmConfig        Json
  lang             String[]
  changelog        String?
  publishedAt      DateTime?
  outAccuracy      Float?
  outLatency       Float?
  outCost          Float?
  promptPackageId  String
  promptTemplateId String
  variables        Json              @default("[]")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt @map("updated_at")
  previewVersion   PromptTemplate?   @relation("previewVersion")
  releaseVersion   PromptTemplate?   @relation("releaseVersion")
  PromptVariables  PromptVariables[]
  promptPackage    PromptPackage     @relation(fields: [promptPackageId], references: [id])
  promptTemplate   PromptTemplate    @relation("template", fields: [promptTemplateId], references: [id])
  user             User              @relation(fields: [userId], references: [id])

  @@unique([promptPackageId, promptTemplateId, version])
}

model User {
  id             String           @id @default(uuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  username       String?          @unique
  image          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt @map("updated_at")
  accounts       Account[]
  promptPackages PromptPackage[]
  PromptTemplate PromptTemplate[]
  PromptVersion  PromptVersion[]
  sessions       Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@unique([identifier, token])
}

model PromptLog {
  id                String            @id @default(uuid())
  userId            String
  inputId           String?
  environment       PromptEnvironment @default(DEV)
  version           String
  prompt            String
  completion        String?
  llmResponse       Json              @default("{}")
  llmModelType      ModelType         @default(TEXT2TEXT)
  llmProvider       String
  llmModel          String
  llmConfig         Json
  latency           Int
  prompt_tokens     Int
  completion_tokens Int
  total_tokens      Int
  extras            Json
  labelledState     LabelledState     @default(UNLABELLED)
  finetunedState    FinetunedState    @default(UNPROCESSED)
  promptPackageId   String
  promptTemplateId  String
  promptVersionId   String
  promptVariables   Json              @default("[]")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @updatedAt @map("updated_at")
}

enum EntityTypes {
  PromptPackage
  PromptTemplate
  PromptVersion
}

model Like {
  id         String     @id @default(uuid())
  likes      LikeUser[]
  likesCount Int        @default(0)
  entityId   String
  entityType String // This field can store the type of the liked model (e.g., "PromptPackage", "PromptTemplate", "PromptVersion", etc.)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt @map("updated_at")

  @@unique([entityId, entityType])
}

model LikeUser {
  id        String   @id @default(uuid())
  userId    String
  likeId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @map("updated_at")
  Like      Like?    @relation(fields: [likeId], references: [id])

  @@unique([userId, likeId])
}

model Blog {
  id           String    @id @default(uuid())
  title        String
  description  String
  slug         String    @unique
  tags         Json      @default("[]")
  publishedAt  DateTime?
  mediaUrl     String
  mediaType    MediaType @default(IMAGE)
  previewImage String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt @map("updated_at")
}
