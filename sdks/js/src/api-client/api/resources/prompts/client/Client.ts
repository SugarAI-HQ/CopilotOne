/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as SugarAiApi from "../../..";
import * as serializers from "../../../../serialization";
import { urlJoin } from "url-join-ts";
import * as errors from "../../../../errors";

export declare namespace Prompts {
  interface Options {
    environment?: core.Supplier<environments.SugarAiApiEnvironment | string>;
    token?: core.Supplier<core.BearerToken | undefined>;
  }

  interface RequestOptions {
    timeoutInSeconds?: number;
    maxRetries?: number;
  }
}

export class Prompts {
  constructor(protected readonly _options: Prompts.Options = {}) {}

  public async serviceGenerate(
    username: string,
    packageName: string,
    template: string,
    versionOrEnvironment: string,
    request: SugarAiApi.ServiceGenerateRequest,
    requestOptions?: Prompts.RequestOptions,
  ): Promise<SugarAiApi.ServiceGenerateResponse> {
    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.SugarAiApiEnvironment.Default,
        `${username}/${packageName}/${template}/${versionOrEnvironment}/generate`,
      ),
      method: "POST",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript",
      },
      contentType: "application/json",
      body: await serializers.ServiceGenerateRequest.jsonOrThrow(request, {
        unrecognizedObjectKeys: "strip",
      }),
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
    });
    if (_response.ok) {
      return await serializers.ServiceGenerateResponse.parseOrThrow(
        _response.body,
        {
          unrecognizedObjectKeys: "passthrough",
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: ["response"],
        },
      );
    }

    if (_response.error.reason === "status-code") {
      throw new errors.SugarAiApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.SugarAiApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.SugarAiApiTimeoutError();
      case "unknown":
        throw new errors.SugarAiApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  public async cubeGetPrompt(
    username: string,
    packageName: string,
    template: string,
    versionOrEnvironment: string,
    request: SugarAiApi.CubeGetPromptRequest = {},
    requestOptions?: Prompts.RequestOptions,
  ): Promise<SugarAiApi.CubeGetPromptResponse> {
    const {
      environment,
      version,
      userId,
      promptPackageId,
      promptTemplateId,
      promptVersionId,
    } = request;
    const _queryParams: Record<string, string | string[]> = {};
    if (environment != null) {
      _queryParams["environment"] = environment;
    }

    if (version != null) {
      _queryParams["version"] = version;
    }

    if (userId != null) {
      _queryParams["userId"] = userId;
    }

    if (promptPackageId != null) {
      _queryParams["promptPackageId"] = promptPackageId;
    }

    if (promptTemplateId != null) {
      _queryParams["promptTemplateId"] = promptTemplateId;
    }

    if (promptVersionId != null) {
      _queryParams["promptVersionId"] = promptVersionId;
    }

    const _response = await core.fetcher({
      url: urlJoin(
        (await core.Supplier.get(this._options.environment)) ??
          environments.SugarAiApiEnvironment.Default,
        `${username}/${packageName}/${template}/${versionOrEnvironment}`,
      ),
      method: "GET",
      headers: {
        Authorization: await this._getAuthorizationHeader(),
        "X-Fern-Language": "JavaScript",
      },
      contentType: "application/json",
      queryParameters: _queryParams,
      timeoutMs:
        requestOptions?.timeoutInSeconds != null
          ? requestOptions.timeoutInSeconds * 1000
          : 60000,
      maxRetries: requestOptions?.maxRetries,
    });
    if (_response.ok) {
      return await serializers.CubeGetPromptResponse.parseOrThrow(
        _response.body,
        {
          unrecognizedObjectKeys: "passthrough",
          allowUnrecognizedUnionMembers: true,
          allowUnrecognizedEnumValues: true,
          breadcrumbsPrefix: ["response"],
        },
      );
    }

    if (_response.error.reason === "status-code") {
      throw new errors.SugarAiApiError({
        statusCode: _response.error.statusCode,
        body: _response.error.body,
      });
    }

    switch (_response.error.reason) {
      case "non-json":
        throw new errors.SugarAiApiError({
          statusCode: _response.error.statusCode,
          body: _response.error.rawBody,
        });
      case "timeout":
        throw new errors.SugarAiApiTimeoutError();
      case "unknown":
        throw new errors.SugarAiApiError({
          message: _response.error.errorMessage,
        });
    }
  }

  protected async _getAuthorizationHeader() {
    const bearer = await core.Supplier.get(this._options.token);
    if (bearer != null) {
      return `Bearer ${bearer}`;
    }

    return undefined;
  }
}
